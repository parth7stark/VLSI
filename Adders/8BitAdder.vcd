$date
	Wed Aug 28 19:52:39 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " Cout $end
$var reg 8 # A [7:0] $end
$var reg 8 $ B [7:0] $end
$var reg 1 % Cin $end
$scope module F0 $end
$var wire 8 & A [7:0] $end
$var wire 8 ' B [7:0] $end
$var wire 1 % Cin $end
$var wire 8 ( Sum [7:0] $end
$var wire 1 " Cout $end
$var wire 1 ) C1 $end
$scope module f1 $end
$var wire 4 * A [3:0] $end
$var wire 4 + B [3:0] $end
$var wire 1 % Cin $end
$var wire 4 , sum [3:0] $end
$var wire 1 ) carry $end
$var wire 1 - C3 $end
$var wire 1 . C2 $end
$var wire 1 / C1 $end
$scope module FA_0 $end
$var wire 1 0 A $end
$var wire 1 1 B $end
$var wire 1 % C $end
$var wire 1 / carry $end
$var wire 1 2 sum $end
$upscope $end
$scope module FA_1 $end
$var wire 1 3 A $end
$var wire 1 4 B $end
$var wire 1 / C $end
$var wire 1 . carry $end
$var wire 1 5 sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 6 A $end
$var wire 1 7 B $end
$var wire 1 . C $end
$var wire 1 - carry $end
$var wire 1 8 sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 9 A $end
$var wire 1 : B $end
$var wire 1 - C $end
$var wire 1 ) carry $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 4 < A [3:0] $end
$var wire 4 = B [3:0] $end
$var wire 1 ) Cin $end
$var wire 4 > sum [3:0] $end
$var wire 1 " carry $end
$var wire 1 ? C3 $end
$var wire 1 @ C2 $end
$var wire 1 A C1 $end
$scope module FA_0 $end
$var wire 1 B A $end
$var wire 1 C B $end
$var wire 1 ) C $end
$var wire 1 A carry $end
$var wire 1 D sum $end
$upscope $end
$scope module FA_1 $end
$var wire 1 E A $end
$var wire 1 F B $end
$var wire 1 A C $end
$var wire 1 @ carry $end
$var wire 1 G sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 H A $end
$var wire 1 I B $end
$var wire 1 @ C $end
$var wire 1 ? carry $end
$var wire 1 J sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 K A $end
$var wire 1 L B $end
$var wire 1 ? C $end
$var wire 1 " carry $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1M
0L
1K
1J
1I
0H
1G
1F
0E
0D
0C
0B
0A
0@
0?
b1110 >
b110 =
b1000 <
0;
0:
09
08
07
06
05
04
03
12
11
00
0/
0.
0-
b1 ,
b1 +
b0 *
0)
b11100001 (
b1100001 '
b10000000 &
0%
b1100001 $
b10000000 #
0"
b11100001 !
$end
#10
b0 ,
02
0G
0J
b0 !
b0 (
b0 >
0M
01
0F
0I
0K
b0 +
b0 =
b0 <
b0 $
b0 '
b0 #
b0 &
#20
b100 >
1J
12
b1000011 !
b1000011 (
b11 ,
15
1I
10
13
b100 =
b11 *
b1000000 $
b1000000 '
b11 #
b11 &
#30
1M
1?
0J
18
1@
1.
b1001 >
1D
1/
14
1C
1F
0I
1E
1H
b10010110 !
b10010110 (
b110 ,
02
b10 +
b11 =
b110 <
1%
b110010 $
b110010 '
b1100011 #
b1100011 &
#40
1G
1;
1)
1A
b1111 ,
12
1J
1-
b11111111 !
b11111111 (
b1111 >
1D
1"
11
17
1:
1I
1L
16
19
1B
1K
b1111 +
b1111 =
b1111 *
b1111 <
b11111111 $
b11111111 '
b11111111 #
b11111111 &
